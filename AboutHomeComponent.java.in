#filter substitution
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

package @ANDROID_PACKAGE_NAME@.tests;

import static @ANDROID_PACKAGE_NAME@.tests.AssertionHelper.*;

import @ANDROID_PACKAGE_NAME@.Actions;

import com.jayway.android.robotium.solo.Condition;
import com.jayway.android.robotium.solo.Solo;

import android.support.v4.view.PagerAdapter;
import android.support.v4.view.ViewPager;
import android.view.View;

class AboutHomeComponent extends UITestComponent {
    // TODO: Can we just import the enum directly?
    // This enum should be kept in sync with ...home.HomePager.Page.
    public enum Page {
        HISTORY,
        TOP_SITES,
        BOOKMARKS,
        READING_LIST
    }

    private static final String HOME_PAGER_ID = "home_pager";

    public AboutHomeComponent(UITestContext testContext) {
        super(testContext);
    }

    ViewPager getHomePagerView() {
        return (ViewPager) mSolo.getView(HOME_PAGER_ID);
    }

    public boolean hasCurrentPage(final Page page) {
        return getHomePagerView().getCurrentItem() == page.ordinal();
    }

    public boolean isVisible() {
        return getHomePagerView().getVisibility() == View.VISIBLE;
    }

    private void waitForCurrentItem(final int expectedItem) {
        WaitHelper.wait(new Condition() {
            @Override
            public boolean isSatisfied() {
                return getHomePagerView().getCurrentItem() == expectedItem;
            }
        });
    }

    private void swipe(int direction) {
        assertTrue(isVisible());

        final int currentItem = getHomePagerView().getCurrentItem();

        if (direction == Solo.LEFT) {
            GestureHelper.swipeLeft();
        } else {
            GestureHelper.swipeRight();
        }

        final PagerAdapter adapter = getHomePagerView().getAdapter();
        assertNotNull(adapter);

        // Swiping left goes to next, swiping right goes to previous
        final int newItem = currentItem + (direction == Solo.LEFT ? 1 : -1);

        // Clamp new item index to possible ranges
        final int expectedItem = Math.min(Math.max(0, newItem), adapter.getCount() - 1);

        // TODO: Previous error message might be useful:
        //     "Current item is not correct after swiping"
        waitForCurrentItem(expectedItem);
    }

    public AboutHomeComponent swipeToNext() {
        swipe(Solo.LEFT);
        return this;
    }

    public AboutHomeComponent swipeToPrevious() {
        swipe(Solo.RIGHT);
        return this;
    }
}
