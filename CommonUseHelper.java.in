#filter substitution
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

package @ANDROID_PACKAGE_NAME@.tests;

import static @ANDROID_PACKAGE_NAME@.tests.AssertionHelper.*;

import @ANDROID_PACKAGE_NAME@.Actions;
import @ANDROID_PACKAGE_NAME@.Actions.EventExpecter;

import android.app.Activity;
import java.lang.Class;
import java.lang.ClassLoader;
import java.lang.reflect.Method;

/**
 * A Helper for common use cases combining multiple components or not belonging to a particular
 * component.
 *
 * To prevent code crufting, this should not be a miscellaneous "dump everything!" class - new
 * Components should be freely created, even for lone methods.
 */
final class CommonUseHelper {
    private static final String GECKO_THREAD_CLASS = "org.mozilla.gecko.GeckoThread";
    private static final String LAUNCH_STATE_CLASS = GECKO_THREAD_CLASS + "$LaunchState";

    // UI test currently running
    private static UITest sTest;

    private CommonUseHelper() { /* To disallow instantiation. */ }

    // TODO: Should be UITestContext.
    public static void init(final UITest test) {
        sTest = test;
    }

    // TODO: Move to GeckoHelper?
    public static void blockForGeckoReady() {
        try {
            final Actions actions = sTest.getActions();

            final EventExpecter geckoReady = actions.expectGeckoEvent("Gecko:Ready");

            // TODO: Bug 709230: Remove reflection?
            final ClassLoader cl = sTest.getActivity().getClassLoader();
            final Class geckoThreadClass = cl.loadClass(GECKO_THREAD_CLASS);
            final Class launchStateClass = cl.loadClass(LAUNCH_STATE_CLASS);
            final Method checkLaunchStateMethod =
                    geckoThreadClass.getMethod("checkLaunchState", launchStateClass);
            final boolean isReady = ((Boolean) checkLaunchStateMethod.invoke(null,
                    launchStateClass.getEnumConstants()[3])).booleanValue();

            if (!isReady) {
                geckoReady.blockForEvent();
            }

            geckoReady.unregisterListener();
        } catch (Exception e) {
            sTest.dumpLog("Exception in blockForGeckoReady", e);
        }
    }
}
