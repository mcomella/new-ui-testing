#filter substitution
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

package @ANDROID_PACKAGE_NAME@.tests;

import static @ANDROID_PACKAGE_NAME@.tests.UITestAssertions.assertThat;

import com.jayway.android.robotium.solo.Solo;

import android.os.SystemClock;

final class WaitHelper {
    private static UITestContext sTestContext;

    private static final int DEFAULT_MAX_WAIT_MS = 5000;

    public interface WaitTest {
        public boolean test();
    }

    private WaitHelper() {
    }

    public static void init(UITestContext testContext) {
        sTestContext = testContext;
    }

    public static boolean wait(WaitTest t) {
        return wait(t, DEFAULT_MAX_WAIT_MS);
    }

    public static boolean wait(WaitTest t, int timeout) {
        assertThat(sTestContext).isNotNull();

        final Solo solo = sTestContext.getSolo();
        final long end = SystemClock.uptimeMillis() + timeout;

        while (SystemClock.uptimeMillis() < end) {
            boolean result;
            try {
                result = t.test();
            } catch (AssertionError ae) {
                // We might want to assert inside in WaitTest in
                // order to check expected state.
                result = false;
            }

            if (result) {
                return true;
            }

            solo.sleep(100);
        }

        // Log out wait failure for diagnostic purposes only;
        // a failed wait may be normal and does not necessarily
        // warrant a test assertion/failure.
        sTestContext.dumpLog("WaitHelper.wait() timeout after " + timeout + " ms");

        return false;
    }
}
