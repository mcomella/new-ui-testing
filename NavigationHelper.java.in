#filter substitution
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

package @ANDROID_PACKAGE_NAME@.tests;

import static @ANDROID_PACKAGE_NAME@.tests.AssertionHelper.*;

import @ANDROID_PACKAGE_NAME@.Actions;
import @ANDROID_PACKAGE_NAME@.Actions.EventExpecter;
import @ANDROID_PACKAGE_NAME@.tests.WaitHelper.InitiatingAction;

import android.text.TextUtils;

final public class NavigationHelper {
    static final String ABOUT_HOME_URL = "about:home";
    static final String ABOUT_HOME_TITLE = "";

    static final String BLANK01_URL = "/robocop/robocop_blank_01.html";
    static final String BLANK01_TITLE = "Browser Blank Page 01";

    static final String BLANK02_URL = "/robocop/robocop_blank_02.html";
    static final String BLANK02_TITLE = "Browser Blank Page 02";

    static final String BLANK03_URL = "/robocop/robocop_blank_03.html";
    static final String BLANK03_TITLE = "Browser Blank Page 03";

    private static UITest sTest;

    // TODO: Should be UITestContext.
    public static void init(final UITest test) {
        sTest = test;
    }

    public static void enterAndLoadUrl(String url) {
        // TODO: Are these necessary? Perhaps assertInitialized() instead?
        assertNotNull(sTest);
        assertNotNull(sTest.TOOLBAR);

        url = adjustIfPredefined(url);
        sTest.TOOLBAR.enterEditingMode().enterUrl(url).commitEditingMode();
    }

    // TODO: Doc? How is it adjusted?
    private static String adjustIfPredefined(final String url) {
        if (TextUtils.equals(url, BLANK01_URL) ||
            TextUtils.equals(url, BLANK02_URL) ||
            TextUtils.equals(url, BLANK03_URL)) {
            return sTest.getAbsoluteUrl(url);
        }

        return url;
    }

    // TODO: Ambiguous name? Is CommonUseHelper.goBack() enough? Perhaps w/ doc?
    // TODO: Can send "Session:Back" to Gecko - but defeats benefit of UI testing.
    public static void goBack() {
        // TODO: Necessary?
        assertNotNull(sTest);

        if (DeviceHelper.isTablet()) {
            assertNotNull(sTest.TOOLBAR); // TODO: Necessary?
            sTest.TOOLBAR.pressBack(); // Waits for page load.
            return;
        }

        WaitHelper.waitForPageLoad(new InitiatingAction() {
            @Override
            public void doAction() {
                // TODO: Lower soft keyboard first?
                // TODO: Solo.goBack
                sTest.getActions().sendSpecialKey(Actions.SpecialKey.BACK);
            }
        });
    }

    public static void goForward() {
        // TODO: Necessary?
        assertNotNull(sTest);

        if (DeviceHelper.isTablet()) {
            assertNotNull(sTest.TOOLBAR);
            sTest.TOOLBAR.pressForward(); // Waits for page load.
            return;
        }

        WaitHelper.waitForPageLoad(new InitiatingAction() {
            @Override
            public void doAction() {
                // TODO: Press forward with APPMENU component
            }
        });
    }

    public static void reload() {
        // TODO: On tablets, press reload in TOOLBAR.
        //       On phones, press reload in APPMENU.
    }
}
