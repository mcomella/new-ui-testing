#filter substitution
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

package @ANDROID_PACKAGE_NAME@.tests;

import static @ANDROID_PACKAGE_NAME@.tests.AssertionHelper.*;

import @ANDROID_PACKAGE_NAME@.Actions;
import @ANDROID_PACKAGE_NAME@.Actions.EventExpecter;
import @ANDROID_PACKAGE_NAME@.tests.WaitHelper.InitiatingAction;

import android.text.TextUtils;

final public class NavigationHelper {
    private static UITest sTest;

    private static String[] sPredefinedUrls = new String[] {
        StringHelper.ROBOCOP_BLANK_PAGE_01_URL,
        StringHelper.ROBOCOP_BLANK_PAGE_02_URL,
        StringHelper.ROBOCOP_BLANK_PAGE_03_URL
    };

    // TODO: Should be UITestContext.
    public static void init(final UITest test) {
        sTest = test;
    }

    public static void enterAndLoadUrl(String url) {
        // TODO: Are these necessary? Perhaps assertInitialized() instead?
        assertNotNull(sTest);
        assertNotNull(sTest.TOOLBAR);

        url = adjustIfPredefined(url);
        sTest.TOOLBAR.enterEditingMode().enterUrl(url).commitEditingMode();
    }

    /**
     * Returns a new URL with the docshell HTTP server host prefix if the given url is
     * predefined, otherwise returns the given url.
     */
    private static String adjustIfPredefined(final String url) {
        for (final String predefinedUrl : sPredefinedUrls) {
            if (TextUtils.equals(url, predefinedUrl)) {
                return sTest.getAbsoluteUrl(url);
            }
        }

        return url;
    }

    // TODO: Ambiguous name? Is CommonUseHelper.goBack() enough? Perhaps w/ doc?
    public static void goBack() {
        // TODO: Necessary?
        assertNotNull(sTest);

        if (DeviceHelper.isTablet()) {
            assertNotNull(sTest.TOOLBAR); // TODO: Necessary?
            sTest.TOOLBAR.pressBackButton(); // Waits for page load.
            return;
        }

        WaitHelper.waitForPageLoad(new InitiatingAction() {
            @Override
            public void doAction() {
                // TODO: Lower soft keyboard first?
                // TODO: Solo.goBack
                sTest.getActions().sendSpecialKey(Actions.SpecialKey.BACK);
            }
        });
    }

    public static void goForward() {
        // TODO: Necessary? Perhaps assertInitialized?
        assertNotNull(sTest);

        if (DeviceHelper.isTablet()) {
            assertNotNull(sTest.TOOLBAR);
            sTest.TOOLBAR.pressForwardButton(); // Waits for page load.
            return;
        }

        WaitHelper.waitForPageLoad(new InitiatingAction() {
            @Override
            public void doAction() {
                // TODO: Press forward with APPMENU component
            }
        });
    }

    public static void reload() {
        // TODO: On tablets, press reload in TOOLBAR.
        //       On phones, press reload in APPMENU.
    }
}
