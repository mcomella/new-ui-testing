#filter substitution
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

package @ANDROID_PACKAGE_NAME@.tests;

import @ANDROID_PACKAGE_NAME@.Actions;
import @ANDROID_PACKAGE_NAME@.Assert;
import @ANDROID_PACKAGE_NAME@.Driver;
import @ANDROID_PACKAGE_NAME@.FennecInstrumentationTestRunner;
import @ANDROID_PACKAGE_NAME@.FennecMochitestAssert;
import @ANDROID_PACKAGE_NAME@.FennecNativeActions;
import @ANDROID_PACKAGE_NAME@.FennecNativeDriver;
import @ANDROID_PACKAGE_NAME@.FennecTalosAssert;

import com.jayway.android.robotium.solo.Solo;

import android.app.Activity;
import android.content.Intent;
import android.test.ActivityInstrumentationTestCase2;
import android.text.TextUtils;

import java.util.HashMap;

abstract class UITest extends ActivityInstrumentationTestCase2<Activity>
                      implements UITestContext {
    protected enum Type {
        MOCHITEST,
        TALOS
    }

    private static final String LAUNCHER_ACTIVITY ="@ANDROID_PACKAGE_NAME@.App";
    private static final String TARGET_PACKAGE_ID = "org.mozilla.gecko";

    private final static Class<Activity> sLauncherActivityClass;

    private Activity mActivity;
    private Solo mSolo;
    private Driver mDriver;
    private Actions mActions;
    private Assert mAsserter;

    // Base to build absolute URLs
    private String mBaseUrl;
    // Base to build raw absolute URLs
    private String mRawBaseUrl;

    // TODO: These aren't constants. Keep names capitalized for visibility?
    AboutHomeComponent ABOUTHOME;
    ToolbarComponent TOOLBAR;

    static {
        try {
            sLauncherActivityClass = (Class<Activity>) Class.forName(LAUNCHER_ACTIVITY);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
    }

    public UITest() {
        super(sLauncherActivityClass);
    }

    @Override
    protected void setUp() throws Exception {
        super.setUp();

        final String rootPath = FennecInstrumentationTestRunner.getFennecArguments().getString("deviceroot");
        final HashMap config = loadConfigTable(rootPath);
        final Intent intent = createActivityIntent(config);
        setActivityIntent(intent);

        // Start the activity
        // TODO: Fix. getActivity() returns null so I call launchActivityWithIntent explicitly.
        // Perhaps this is because the class' type parameter is "Activity"?
        final String pkgName = getInstrumentation().getTargetContext().getPackageName();
        mActivity = launchActivityWithIntent(pkgName, sLauncherActivityClass, intent);
        //mActivity = getActivity();

        if (getTestType() == Type.TALOS) {
            mAsserter = new FennecTalosAssert();
        } else {
            mAsserter = new FennecMochitestAssert();
        }

        final String logFile = (String) config.get("logfile");
        mAsserter.setLogFile(logFile);
        mAsserter.setTestName(this.getClass().getName());

        mSolo = new Solo(getInstrumentation(), mActivity);
        mDriver = new FennecNativeDriver(mActivity, mSolo, rootPath);
        mActions = new FennecNativeActions(mActivity, mSolo, getInstrumentation(), mAsserter);

        mBaseUrl = ((String) config.get("host")).replaceAll("(/$)", "");
        mRawBaseUrl = ((String) config.get("rawhost")).replaceAll("(/$)", "");

        initComponents();
        initHelpers();
    }

    @Override
    public void tearDown() throws Exception {
        try {
            mAsserter.endTest();
            mSolo.finishOpenedActivities();
        } catch (Throwable e) {
            e.printStackTrace();
        }

        super.tearDown();
    }

    private void initComponents() throws Exception {
        ABOUTHOME = new AboutHomeComponent(this);
        TOOLBAR = new ToolbarComponent(this);
    }

    // TODO: Should the helpers be instance variables?
    private void initHelpers() {
        AssertionHelper.init(this);
        CommonUseHelper.init(this);
        DeviceHelper.init(this);
        GestureHelper.init(this);
        NavigationHelper.init(this);
        ViewHelper.init(this);
        WaitHelper.init(this);
    }

    @Override
    public Activity getActivity() {
        return mActivity;
    }

    @Override
    public Solo getSolo() {
        return mSolo;
    }

    @Override
    public Assert getAsserter() {
        return mAsserter;
    }

    @Override
    public Driver getDriver() {
        return mDriver;
    }

    @Override
    public Actions getActions() {
        return mActions;
    }

    @Override
    public void dumpLog(String message) {
        mAsserter.dumpLog(message);
    }

    @Override
    public void dumpLog(String message, Throwable t) {
        mAsserter.dumpLog(message, t);
    }

    protected Type getTestType() {
        return Type.MOCHITEST;
    }

    protected final String getAbsoluteUrl(String url) {
        return mBaseUrl + "/" + url.replaceAll("(^/)", "");
    }

    protected final String getAbsoluteRawUrl(String url) {
        return mRawBaseUrl + "/" + url.replaceAll("(^/)", "");
    }

    private static HashMap loadConfigTable(String rootPath) {
        final String configFile = FennecNativeDriver.getFile(rootPath + "/robotium.config");
        return FennecNativeDriver.convertTextToTable(configFile);
    }

    private static Intent createActivityIntent(HashMap config) {
        final Intent intent = new Intent(Intent.ACTION_MAIN);

        final String profile = (String) config.get("profile");
        intent.putExtra("args", "-no-remote -profile " + profile);

        final String envString = (String) config.get("envvars");
        if (!TextUtils.isEmpty(envString)) {
            final String[] envStrings = envString.split(",");

            for (int iter = 0; iter < envStrings.length; iter++) {
                intent.putExtra("env" + iter, envStrings[iter]);
            }
        }

        return intent;
    }
}
