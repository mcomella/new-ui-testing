#filter substitution
package @ANDROID_PACKAGE_NAME@.tests;

import static @ANDROID_PACKAGE_NAME@.tests.AssertionHelper.*;

import @ANDROID_PACKAGE_NAME@.tests.AboutHomeComponent.Page;

/* Test correct state for URL bar after loading pages.
 */
public class testAboutHomeVisibility extends UITest {
    public void testAboutHomeVisibility() {
        CommonUseHelper.blockForGeckoReady();

        // Check initial state with about:home
        assertTrue(TOOLBAR.hasTitle(CommonUseHelper.ABOUT_HOME_TITLE));
        assertTrue(ABOUTHOME.isVisible());
        assertTrue(ABOUTHOME.hasCurrentPage(Page.TOP_SITES));

        // Go to blank 01
        CommonUseHelper.enterAndLoadUrl(CommonUseHelper.BLANK01_URL);
        // TODO: Assertion below failed.
        assertTrue(TOOLBAR.hasTitle(CommonUseHelper.BLANK01_TITLE));
        assertFalse(ABOUTHOME.isVisible());

        // Go to blank 02
        CommonUseHelper.enterAndLoadUrl(CommonUseHelper.BLANK02_URL);
        assertTrue(TOOLBAR.hasTitle(CommonUseHelper.BLANK02_TITLE));
        assertFalse(ABOUTHOME.isVisible());

        // Enter editing mode, about:home UI should be visible
        TOOLBAR.enterEditingMode();
        assertTrue(ABOUTHOME.isVisible());
        assertTrue(ABOUTHOME.hasCurrentPage(Page.TOP_SITES));

        // Dismiss editing mode, about:home UI should be gone
        TOOLBAR.dismissEditingMode();
        assertFalse(ABOUTHOME.isVisible());

        // Loading about:home should show about:home again
        CommonUseHelper.enterAndLoadUrl(CommonUseHelper.ABOUT_HOME_URL);
        assertTrue(TOOLBAR.hasTitle(CommonUseHelper.ABOUT_HOME_TITLE));
        assertTrue(ABOUTHOME.isVisible());
        assertTrue(ABOUTHOME.hasCurrentPage(Page.TOP_SITES));
    }
}
