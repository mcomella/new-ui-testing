#filter substitution
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

package @ANDROID_PACKAGE_NAME@.tests;

import static @ANDROID_PACKAGE_NAME@.tests.AssertionHelper.*;

import com.jayway.android.robotium.solo.Condition;

import @ANDROID_PACKAGE_NAME@.Actions;

import android.view.View;
import android.widget.ImageButton;
import android.widget.TextView;

class ToolbarComponent extends UITestComponent {
    private static final String BROWSER_TOOLBAR_ID = "browser_toolbar";
    private static final String URL_EDIT_TEXT_ID = "url_edit_text";
    private static final String URL_DISPLAY_CONTAINER_ID = "url_display_container";
    private static final String URL_TITLE_TEXT_ID = "url_bar_title";
    private static final String GO_BUTTON_ID = "go";
    private static final String BACK_BUTTON_ID = "back";
    private static final String FORWARD_BUTTON_ID = "forward";

    public ToolbarComponent(UITestContext testContext) {
        super(testContext);
    }

    /**
     * Returns the root View for the browser toolbar.
     */
    View getToolbarView() {
        return mSolo.getView(BROWSER_TOOLBAR_ID);
    }

    TextView getUrlEditText() {
        return (TextView) ViewHelper.findViewById(getToolbarView(), URL_EDIT_TEXT_ID);
    }

    View getUrlDisplayContainer() {
        return ViewHelper.findViewById(getToolbarView(), URL_DISPLAY_CONTAINER_ID);
    }

    TextView getUrlTitleText() {
        return (TextView) ViewHelper.findViewById(getToolbarView(), URL_TITLE_TEXT_ID);
    }

    /**
     * Returns the View for the go button in the browser toolbar.
     */
    ImageButton getGoButton() {
        return (ImageButton) ViewHelper.findViewById(getToolbarView(), GO_BUTTON_ID);
    }

    ImageButton getBackButton() {
        return (ImageButton) ViewHelper.findViewById(getToolbarView(), BACK_BUTTON_ID);
    }

    ImageButton getForwardButton() {
        return (ImageButton) ViewHelper.findViewById(getToolbarView(), FORWARD_BUTTON_ID);
    }

    public boolean hasTitle(final String expected) {
        // TODO: How is this affected by the showURL preference?
        return getUrlTitleText().getText().equals(expected);
    }

    // TODO: Might need to remove or collapse with title for visibility reasons.
    // Or better yet, assert it is visible, in editing mode, etc.
    public boolean hasUrl(final String expected) {
        return getUrlEditText().getText().equals(expected);
    }

    public boolean isEditing() {
        // TODO: DisplayContainer vs. TitleText.
        return getUrlDisplayContainer().getVisibility() != View.VISIBLE &&
                getUrlEditText().getVisibility() == View.VISIBLE &&
                getGoButton().getVisibility() == View.VISIBLE;
    }

    public ToolbarComponent enterEditingMode() {
        assertFalse(isEditing());

        mSolo.clickOnView(getUrlTitleText(), true);
        // TODO: Previous comment: "Failed to update UI state for editing mode".
        WaitHelper.wait(new Condition() {
            @Override
            public boolean isSatisfied() {
                return isEditing();
            }
        });
        assertTrue(isEditing()); // TODO: Redundant.

        // TODO: Previous comment: "Failed to get input focus on editing mode"
        WaitHelper.wait(new Condition() {
            @Override
            public boolean isSatisfied() {
                return getUrlEditText().isInputMethodTarget();
            }
        });

        return this;
    }

    public ToolbarComponent commitEditingMode() {
        assertTrue(isEditing());

        mSolo.clickOnView(getGoButton());

        WaitHelper.wait(new Condition() {
            @Override
            public boolean isSatisfied() {
                return !isEditing();
            }
        });

        // TODO: Previous comment: "Failed to update UI state to commit editing mode"
        assertFalse(isEditing());

        return this;
    }

    public ToolbarComponent dismissEditingMode() {
        assertTrue(isEditing());

        // TODO: Better way to drop the soft keyboard? Is this the most correct way? etc.
        if (getUrlEditText().hasFocus()) {
            // Drop the soft keyboard.
            mActions.sendSpecialKey(Actions.SpecialKey.BACK);
        }
        mActions.sendSpecialKey(Actions.SpecialKey.BACK);

        WaitHelper.wait(new Condition() {
            @Override
            public boolean isSatisfied() {
                return !isEditing();
            }
        });

        // TODO: Previous comment: "Failed to update UI state to dismiss editing mode"
        assertFalse(isEditing());

        return this;
    }

    public ToolbarComponent enterUrl(String url) {
        assertTrue(isEditing());
        assertTrue(getUrlEditText().isInputMethodTarget());

        mActions.sendKeys(url);

        return this;
    }

    // TODO: Ambiguous name? Add doc or is Component.pressBack descriptive enough?
    // TODO: pressBackButton?
    public ToolbarComponent pressBack() {
        final ImageButton backButton = getBackButton();

        assertNotNull(backButton);
        assertTrue(backButton.getVisibility() == View.VISIBLE);

        mSolo.clickOnView(backButton);

        // TODO: Wait for something to happen?
        return this;
    }

    public ToolbarComponent pressForward() {
        final ImageButton forwardButton = getForwardButton();

        assertNotNull(forwardButton);
        assertTrue(forwardButton.getVisibility() == View.VISIBLE);

        mSolo.clickOnView(forwardButton);

        return this;
    }
}
