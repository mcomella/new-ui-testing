#filter substitution
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

package @ANDROID_PACKAGE_NAME@.tests;

import static @ANDROID_PACKAGE_NAME@.tests.UITestAssertions.assertThat;

import @ANDROID_PACKAGE_NAME@.Actions;

import org.fest.assertions.api.AbstractAssert;

import com.jayway.android.robotium.solo.Solo;

import android.view.View;
import android.widget.ImageButton;
import android.widget.TextView;

import org.fest.assertions.api.ANDROID;

class ToolbarComponent extends UITestComponent {
    private static final String BROWSER_TOOLBAR_ID = "browser_toolbar";
    private static final String URL_EDIT_TEXT_ID = "url_edit_text";
    private static final String URL_TITLE_TEXT_ID = "url_bar_title";
    private static final String GO_BUTTON_ID = "go";
    private static final String BACK_BUTTON_ID = "back";
    private static final String FORWARD_BUTTON_ID = "forward";

    private static ToolbarComponentAssert sAssert;

    public ToolbarComponent(UITestContext testContext) {
        super(testContext);
    }

    /**
     * Returns the root View for the browser toolbar.
     */
    View getToolbarView() {
        return mSolo.getView(BROWSER_TOOLBAR_ID);
    }

    TextView getUrlEditText() {
        return (TextView) ViewHelper.findViewById(getToolbarView(), URL_EDIT_TEXT_ID);
    }

    TextView getUrlTitleText() {
        return (TextView) ViewHelper.findViewById(getToolbarView(), URL_TITLE_TEXT_ID);
    }

    /**
     * Returns the View for the go button in the browser toolbar.
     */
    ImageButton getGoButton() {
        return (ImageButton) ViewHelper.findViewById(getToolbarView(), GO_BUTTON_ID);
    }

    ImageButton getBackButton() {
        return (ImageButton) ViewHelper.findViewById(getToolbarView(), BACK_BUTTON_ID);
    }

    ImageButton getForwardButton() {
        return (ImageButton) ViewHelper.findViewById(getToolbarView(), FORWARD_BUTTON_ID);
    }

    public ToolbarComponent enterEditingMode() {
        assertThat(this).isNotEditing();

        mSolo.clickOnView(getUrlTitleText(), true);

        final boolean isEditing = WaitHelper.wait(new WaitHelper.WaitTest() {
            @Override
            public boolean test() {
                assertThat(ToolbarComponent.this).isEditing();
                return true;
            }
        });

        assertThat(isEditing).overridingErrorMessage("Failed to update UI state for editing mode")
                             .isTrue();

        final boolean gotInput = WaitHelper.wait(new WaitHelper.WaitTest() {
            @Override
            public boolean test() {
                return getUrlEditText().isInputMethodTarget();
            }
        });

        assertThat(gotInput).overridingErrorMessage("Failed to get input focus on editing mode")
                            .isTrue();

        return this;
    }

    public ToolbarComponent commitEditingMode() {
        assertThat(this).isEditing();

        mSolo.clickOnView(getGoButton());

        final boolean isNotEditing = WaitHelper.wait(new WaitHelper.WaitTest() {
            @Override
            public boolean test() {
                assertThat(ToolbarComponent.this).isNotEditing();
                return true;
            }
        });

        assertThat(isNotEditing).overridingErrorMessage("Failed to update UI state to commit editing mode")
                                .isTrue();

        return this;
    }

    public ToolbarComponent dismissEditingMode() {
        assertThat(this).isEditing();

        mActions.sendSpecialKey(Actions.SpecialKey.BACK);

        final boolean isNotEditing = WaitHelper.wait(new WaitHelper.WaitTest() {
            @Override
            public boolean test() {
                assertThat(ToolbarComponent.this).isNotEditing();
                return true;
            }
        });

        assertThat(isNotEditing).overridingErrorMessage("Failed to update UI state to dismiss editing mode")
                                .isTrue();

        return this;
    }

    public ToolbarComponent enterUrl(String url) {
        // Override error message
        assertThat(this).isEditing();
        assertThat(getUrlEditText().isInputMethodTarget()).isTrue();

        mActions.sendKeys(url);

        return this;
    }

    public ToolbarComponent pressBack() {
        final ImageButton backButton = getBackButton();

        ANDROID.assertThat(backButton).isNotNull();
        ANDROID.assertThat(backButton).isVisible();

        mSolo.clickOnView(backButton);

        return this;
    }

    public ToolbarComponent pressForward() {
        final ImageButton forwardButton = getForwardButton();

        ANDROID.assertThat(forwardButton).isNotNull();
        ANDROID.assertThat(forwardButton).isVisible();

        mSolo.clickOnView(forwardButton);

        return this;
    }

    public static ToolbarComponentAssert getAssertInstance(ToolbarComponent actual) {
        // It's safe to assume the 'actual' object will always be the same
        // here as ToolbarComponent is a singleton (see UITest).
        if (sAssert == null) {
            sAssert = new ToolbarComponentAssert(actual);
        }

        return sAssert;
    }

    public static class ToolbarComponentAssert extends AbstractAssert<ToolbarComponentAssert, ToolbarComponent> {
        private final ToolbarComponent mActual;

        public ToolbarComponentAssert(ToolbarComponent actual) {
            super(actual, ToolbarComponentAssert.class);
            mActual = actual;
        }

        public ToolbarComponentAssert isEditing() {
            isNotNull();

            ANDROID.assertThat(mActual.getUrlTitleText()).isGone();
            ANDROID.assertThat(mActual.getUrlEditText()).isVisible();
            ANDROID.assertThat(mActual.getGoButton()).isVisible();

            return this;
        }

        public ToolbarComponentAssert isNotEditing() {
            isNotNull();

            ANDROID.assertThat(mActual.getUrlTitleText()).isVisible();
            ANDROID.assertThat(mActual.getUrlEditText()).isGone();
            ANDROID.assertThat(mActual.getGoButton()).isGone();

            return this;
        }

        public ToolbarComponentAssert hasTitle(String title) {
            isNotNull();

            ANDROID.assertThat(mActual.getUrlTitleText()).hasTextString(title);

            return this;
        }

        public ToolbarComponentAssert hasUrl(String url) {
            isNotNull();

            ANDROID.assertThat(mActual.getUrlEditText()).hasTextString(url);

            return this;
        }
    }
}
