#filter substitution
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

package @ANDROID_PACKAGE_NAME@.tests;

import com.jayway.android.robotium.solo.Solo;

import android.app.Activity;
import android.content.pm.ActivityInfo;
import android.os.Build;
import android.util.DisplayMetrics;
import java.lang.Class;
import java.lang.ClassLoader;
import java.lang.reflect.Method;

final class DeviceHelper {
    private static final String APP_SHELL_CLASS = "org.mozilla.gecko.GeckoAppShell";

    // Android platform version ranges
    public static final int VERSION_2x = 0;
    public static final int VERSION_3x = 1;
    public static final int VERSION_4x = 2;

    // VERSION_2X or VERSION_3X or VERSION_4X
    public static int version;

    public enum Type {
        PHONE,
        TABLET
    }

    private static UITestContext sTestContext;

    // Type of device (phone or tablet)
    public static Type type;

    // Screen width
    public static int width;

    // Screen height
    public static int height;

    public DeviceHelper() { /* To disallow instantiation. */ }

    public static void init(final UITestContext context) {
        sTestContext = context;

        // Determine device version
        int sdk = Build.VERSION.SDK_INT;
        if (sdk < Build.VERSION_CODES.HONEYCOMB) {
            version = VERSION_2x;
        } else {
            if (sdk > Build.VERSION_CODES.HONEYCOMB_MR2) {
                version = VERSION_4x;
            } else {
                version = VERSION_3x;
            }
        }

        final Activity activity = context.getActivity();

        // Determine width and height
        final DisplayMetrics dm = new DisplayMetrics();
        activity.getWindowManager().getDefaultDisplay().getMetrics(dm);
        height = dm.heightPixels;
        width = dm.widthPixels;

        // Determine device type
        boolean isTablet = false;
        try {
            // TODO: Bug 709230: Remove reflection?
            final ClassLoader cl = activity.getClassLoader();
            final Class appShellClass = cl.loadClass(APP_SHELL_CLASS);
            final Method isTabletMethod = appShellClass.getMethod("isTablet");
            isTablet = ((Boolean) isTabletMethod.invoke(null)).booleanValue();
        } catch (Exception e) {
            sTestContext.dumpLog("Exception in detectDevice", e);
        }

        type = (isTablet ? Type.TABLET : Type.PHONE);
    }

    public static boolean isPhone() {
        return (type == Type.PHONE);
    }

    public static boolean isTablet() {
        return (type == Type.TABLET);
    }

    public static void rotate() {
        final Solo solo = sTestContext.getSolo();
        final Activity activity = sTestContext.getActivity();

        if (activity.getRequestedOrientation () == ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE) {
            solo.setActivityOrientation(Solo.PORTRAIT);
        } else {
            solo.setActivityOrientation(Solo.LANDSCAPE);
        }
    }
}
